mat[12:22,col] = c(2250,300,65,2400,300,100,100,50000,20000,1600,30)
mat[1:11,col] = c(-2000,0,0,0,0,-25,-50,-5000,-50,-800,-10)
mat[s,col] = 10
s = s+1
}
slack = foods+1
for(j in 1:row){
#slack variables && z
mat[j,slack] = 1
slack = slack + 1
}
print(mat) #initial matrix
#print(mat[row,])
print("here")
#loops until no negative value left in the solution column
c = any(mat[1:row-1,col] < 0, na.rm = T)
c = TRUE
while(c){
c = FALSE
for(i in 1:(row-1)){
if(mat[i,col] < 0){
PR = i
# if pick one negative coefficient in row
for(m in 1:(col-1))
{
if (mat[i,m] < 0) {
PE = mat[i, m]
#print(m)
#normalize
mat[i,] = mat[i,] / PE
for(j in 1:row){
if(i == j){
next
}
NR = mat[j,m] * mat[i,]
mat[j,] = mat[j,] - NR
}
break
}
}
}
}
#get row index of negative values
#neg_ind1 = which(mat[,col] < 0, arr.ind = T)
#neg_ind = neg_ind1[1]
#print(neg_ind)
c = any(mat[1:row-1,col] < 0, na.rm = T)
#print(neg_ind)
#print(m)
#print(PE)
#print(mat)
}
print(mat) #final matrix
return(mat)
}
###################
#Checks if the last row of the tableau has a negative
##################
neg <-function(tableau,row,col){
for(i in 1:(col-1))
{
if(tableau[row,i]<0)
{
return(TRUE)
}
}
return(FALSE)
}
#find pivot col index
###################
index_pc <- function(tableau,row,col,lowest){
for(i in 1:(col-1)){
if(tableau[row,i]==lowest){
pc_index = i
}
}
return(pc_index)
}
##################
#Main Function
###################
Simplex <- function(csv,selected_foods){
tableau = table(csv,selected) #make initial tableau
row = nrow(tableau)
col = ncol(tableau)
foods = length(selected_foods)
#matrices = list()
#matrices[[1]] = tableau
#checks if the last row still has a negative value
h = neg(tableau,row,col)
while(h){
#find pivot column
PC = index_pc(tableau, row,col, min(tableau[row,1:(col-1)]))
#print(PC)
#test ratio = soln/pivot col
TR = tableau[1:row-1,col]/tableau[1:row-1,PC]
#print(TR)
#finding smallest positive value in TR (not including NaN)
smallest_positive_value <- Inf  # Initialize with positive infinity
for (value in TR) {
if (is.finite(value) && value > 0 && value < smallest_positive_value) {
smallest_positive_value <- value
}
}
#print(smallest_positive_value)
# check if any finite positive value was found in TR
if (smallest_positive_value < Inf) {
PE_index = which(TR == smallest_positive_value)[1]  # for pivot row
PE = tableau[PE_index, PC]  # getting the pivot element
}
#normalize (nPR)
tableau[PE_index,] = tableau[PE_index,]/PE
#print(PE_index)
#elimination
for(i in 1:row){
if(i==PE_index){
next
}else{
C = tableau[i,PC]
#Rn = Rn - npr*C
tableau[i,] = tableau[i,] - (tableau[PE_index,]*C)
}
#print(tableau)
}
#print(tableau)
#matrices[[i+1]] = tableau
#not feasible
#Solution and Cost Breakdown by Food
for(i in 1:(col-1)){
if(is.nan(sum(tableau[,i]))){
print("NO FEASIBLE SOLUTION")
return(NA)
}
}
h = neg(tableau,row,col)
#print(tableau)
#print(tableau[row,])
}
#The Optimized Menu:
z = round(-1*tableau[row,col], 2)
opt_menu = ""
opt_menu = paste0("The cost of this optimal diet is ", z, " per day.")
print(opt_menu)
Food = c()
Servings = c()
Costs = c()
for (q in 1:foods) {
one_loc = which(tableau[,q] == 1, arr.ind = T)
#print(one_loc)
serving = tableau[one_loc,col]
cost = serving*as.numeric(gsub("\\$", "", (csv$Price.Serving[selected_foods[q]])))
Food = c(Food,csv$Foods[selected_foods[q]])
Servings = c(Servings,serving)
Costs = c(Costs,cost)
sol_dataFrame <- data.frame(Food, round(Servings,2), round(Costs,2) )
#print(matrices)
}
#print(tableau) #final tableau
print(sol_dataFrame)
}
csv = read.csv("Complete nutritional values for the foods.csv", header=T)
#supposed to be vector containing the index of food items
#selected =c(18,19,20,8,9,7,1) #csv$Foods[1:20]
selected = c(1:20)
#selected = c(2,4,5,7,8,9)
#print(selected)
#print(table(csv,selected))
#tableau = table(csv,selected)
#print(tableau)
#Simplex(tableau, selected)
Simplex(csv,selected)
#end
##############
table <- function(tableau,selected_foods){
foods = length(selected_foods)
row = 22 + foods  + 1 #constraints + piniling food + objective function
col = row + foods + 1
#making the tableau
mat <- matrix(0:0,row,col,byrow=T)
print(mat)
s = 23 #serving size placeholder
for(i in 1:foods){
mat[1:11,i] = -1* as.numeric(c(csv$Calories[selected_foods[i]],csv$Cholesterol.mg[selected_foods[i]],csv$Total_Fat.g[selected_foods[i]], csv$Sodium.mg[selected_foods[i]],csv$Carbohydrates.g[selected_foods[i]],csv$Dietary_Fiber.g[selected_foods[i]],csv$Protein.g[selected_foods[i]],csv$Vit_A.IU[selected_foods[i]],csv$Vit_C.IU[selected_foods[i]],csv$Calcium.mg[selected_foods[i]],csv$Iron[selected_foods[i]]))
mat[12:22,i] = as.numeric(c(csv$Calories[selected_foods[i]],csv$Cholesterol.mg[selected_foods[i]],csv$Total_Fat.g[selected_foods[i]], csv$Sodium.mg[selected_foods[i]],csv$Carbohydrates.g[selected_foods[i]],csv$Dietary_Fiber.g[selected_foods[i]],csv$Protein.g[selected_foods[i]],csv$Vit_A.IU[selected_foods[i]],csv$Vit_C.IU[selected_foods[i]],csv$Calcium.mg[selected_foods[i]],csv$Iron[selected_foods[i]]))
mat[s,i] = 1 #serving
mat[row,i] = as.numeric(gsub("\\$", "", (csv$Price.Serving[selected_foods[i]]))) #for price per serving
mat[12:22,col] = c(2250,300,65,2400,300,100,100,50000,20000,1600,30)
mat[1:11,col] = c(-2000,0,0,0,0,-25,-50,-5000,-50,-800,-10)
mat[s,col] = 10
s = s+1
}
slack = foods+1
for(j in 1:row){
#slack variables && z
mat[j,slack] = 1
slack = slack + 1
}
print(mat) #initial matrix
#print(mat[row,])
print("here")
#loops until no negative value left in the solution column
#c = any(mat[1:row-1,col] < 0, na.rm = T)
c = TRUE
while(c){
c = FALSE
for(i in 1:(row-1)){
if(mat[i,col] < 0){
PR = i
PC = which.min(mat[PR,1:(col-1)])
# if pick one negative coefficient in row
if (mat[PR,PC] < 0) {
PE = mat[PR,PC]
#print(m)
#normalize
mat[PR,] = mat[PR,] / PE
for(j in 1:row){
if(PR == j){
next
}
NR = mat[j,PC] * mat[PR,]
mat[j,] = mat[j,] - NR
}
break
}
}
}
#get row index of negative values
#neg_ind1 = which(mat[,col] < 0, arr.ind = T)
#neg_ind = neg_ind1[1]
#print(neg_ind)
c = any(mat[1:row-1,col] < 0, na.rm = T)
#print(neg_ind)
#print(m)
#print(PE)
#print(mat)
}
print(mat) #final matrix
return(mat)
}
###################
#Checks if the last row of the tableau has a negative
##################
neg <-function(tableau,row,col){
for(i in 1:(col-1))
{
if(tableau[row,i]<0)
{
return(TRUE)
}
}
return(FALSE)
}
#find pivot col index
###################
index_pc <- function(tableau,row,col,lowest){
for(i in 1:(col-1)){
if(tableau[row,i]==lowest){
pc_index = i
}
}
return(pc_index)
}
##################
#Main Function
###################
Simplex <- function(csv,selected_foods){
tableau = table(csv,selected) #make initial tableau
row = nrow(tableau)
col = ncol(tableau)
foods = length(selected_foods)
#matrices = list()
#matrices[[1]] = tableau
#checks if the last row still has a negative value
h = neg(tableau,row,col)
while(h){
#find pivot column
PC = index_pc(tableau, row,col, min(tableau[row,1:(col-1)]))
#print(PC)
#test ratio = soln/pivot col
TR = tableau[1:row-1,col]/tableau[1:row-1,PC]
#print(TR)
#finding smallest positive value in TR (not including NaN)
smallest_positive_value <- Inf  # Initialize with positive infinity
for (value in TR) {
if (is.finite(value) && value > 0 && value < smallest_positive_value) {
smallest_positive_value <- value
}
}
#print(smallest_positive_value)
# check if any finite positive value was found in TR
if (smallest_positive_value < Inf) {
PE_index = which(TR == smallest_positive_value)[1]  # for pivot row
PE = tableau[PE_index, PC]  # getting the pivot element
}
#checks if the choices is feasible:
if(PE == 0){
return(NA)
}
#normalize (nPR)
tableau[PE_index,] = tableau[PE_index,]/PE
#print(PE_index)
#elimination
for(i in 1:row){
if(i==PE_index){
next
}else{
C = tableau[i,PC]
#Rn = Rn - npr*C
tableau[i,] = tableau[i,] - (tableau[PE_index,]*C)
}
#print(tableau)
}
#print(tableau)
#matrices[[i+1]] = tableau
#not feasible
#Solution and Cost Breakdown by Food
}
print(tableau)
print(tableau[row,])
}
csv = read.csv("Complete nutritional values for the foods.csv", header=T)
#supposed to be vector containing the index of food items
#selected =c(18,19,20,8,9,7,1) #csv$Foods[1:20]
#selected = c(1:20)
selected = c(2,4,5,7,8,9)
#print(selected)
#print(table(csv,selected))
#tableau = table(csv,selected)
#print(tableau)
#Simplex(tableau, selected)
Simplex(csv,selected)
#end
##############
table <- function(tableau,selected_foods){
foods = length(selected_foods)
row = 22 + foods  + 1 #constraints + piniling food + objective function
col = row + foods + 1
#making the tableau
mat <- matrix(0:0,row,col,byrow=T)
print(mat)
s = 23 #serving size placeholder
for(i in 1:foods){
mat[1:11,i] = -1* as.numeric(c(csv$Calories[selected_foods[i]],csv$Cholesterol.mg[selected_foods[i]],csv$Total_Fat.g[selected_foods[i]], csv$Sodium.mg[selected_foods[i]],csv$Carbohydrates.g[selected_foods[i]],csv$Dietary_Fiber.g[selected_foods[i]],csv$Protein.g[selected_foods[i]],csv$Vit_A.IU[selected_foods[i]],csv$Vit_C.IU[selected_foods[i]],csv$Calcium.mg[selected_foods[i]],csv$Iron[selected_foods[i]]))
mat[12:22,i] = as.numeric(c(csv$Calories[selected_foods[i]],csv$Cholesterol.mg[selected_foods[i]],csv$Total_Fat.g[selected_foods[i]], csv$Sodium.mg[selected_foods[i]],csv$Carbohydrates.g[selected_foods[i]],csv$Dietary_Fiber.g[selected_foods[i]],csv$Protein.g[selected_foods[i]],csv$Vit_A.IU[selected_foods[i]],csv$Vit_C.IU[selected_foods[i]],csv$Calcium.mg[selected_foods[i]],csv$Iron[selected_foods[i]]))
mat[s,i] = 1 #serving
mat[row,i] = as.numeric(gsub("\\$", "", (csv$Price.Serving[selected_foods[i]]))) #for price per serving
mat[12:22,col] = c(2250,300,65,2400,300,100,100,50000,20000,1600,30)
mat[1:11,col] = c(-2000,0,0,0,0,-25,-50,-5000,-50,-800,-10)
mat[s,col] = 10
s = s+1
}
slack = foods+1
for(j in 1:row){
#slack variables && z
mat[j,slack] = 1
slack = slack + 1
}
print(mat) #initial matrix
#print(mat[row,])
print("here")
#loops until no negative value left in the solution column
#c = any(mat[1:row-1,col] < 0, na.rm = T)
c = TRUE
while(c){
c = FALSE
for(i in 1:(row-1)){
if(mat[i,col] < 0){
PR = i
PC = which.min(mat[PR,1:(col-1)])
# if pick one negative coefficient in row
if (mat[PR,PC] < 0) {
PE = mat[PR,PC]
#print(m)
#normalize
mat[PR,] = mat[PR,] / PE
for(j in 1:row){
if(PR == j){
next
}
NR = mat[j,PC] * mat[PR,]
mat[j,] = mat[j,] - NR
}
break
}
}
}
#get row index of negative values
#neg_ind1 = which(mat[,col] < 0, arr.ind = T)
#neg_ind = neg_ind1[1]
#print(neg_ind)
c = any(mat[1:row-1,col] < 0, na.rm = T)
#print(neg_ind)
#print(m)
#print(PE)
#print(mat)
}
print(mat) #final matrix
return(mat)
}
###################
#Checks if the last row of the tableau has a negative
##################
neg <-function(tableau,row,col){
for(i in 1:(col-1))
{
if(tableau[row,i]<0)
{
return(TRUE)
}
}
return(FALSE)
}
#find pivot col index
###################
index_pc <- function(tableau,row,col,lowest){
for(i in 1:(col-1)){
if(tableau[row,i]==lowest){
pc_index = i
}
}
return(pc_index)
}
##################
#Main Function
###################
Simplex <- function(csv,selected_foods){
tableau = table(csv,selected) #make initial tableau
row = nrow(tableau)
col = ncol(tableau)
foods = length(selected_foods)
#matrices = list()
#matrices[[1]] = tableau
#checks if the last row still has a negative value
h = neg(tableau,row,col)
while(h){
#find pivot column
PC = index_pc(tableau, row,col, min(tableau[row,1:(col-1)]))
#print(PC)
#test ratio = soln/pivot col
TR = tableau[1:row-1,col]/tableau[1:row-1,PC]
#print(TR)
#finding smallest positive value in TR (not including NaN)
smallest_positive_value <- Inf  # Initialize with positive infinity
for (value in TR) {
if (is.finite(value) && value > 0 && value < smallest_positive_value) {
smallest_positive_value <- value
}
}
#print(smallest_positive_value)
# check if any finite positive value was found in TR
if (smallest_positive_value < Inf) {
PE_index = which(TR == smallest_positive_value)[1]  # for pivot row
PE = tableau[PE_index, PC]  # getting the pivot element
}
#checks if the choices is feasible:
if(PE == 0){
return(NA)
}
#normalize (nPR)
tableau[PE_index,] = tableau[PE_index,]/PE
#print(PE_index)
#elimination
for(i in 1:row){
if(i==PE_index){
next
}else{
C = tableau[i,PC]
#Rn = Rn - npr*C
tableau[i,] = tableau[i,] - (tableau[PE_index,]*C)
}
#print(tableau)
}
#print(tableau)
#matrices[[i+1]] = tableau
#not feasible
#Solution and Cost Breakdown by Food
}
print(tableau)
print(tableau[row,])
}
csv = read.csv("Complete nutritional values for the foods.csv", header=T)
#supposed to be vector containing the index of food items
#selected =c(18,19,20,8,9,7,1) #csv$Foods[1:20]
selected = c(1:20)
#selected = c(2,4,5,7,8,9)
#print(selected)
#print(table(csv,selected))
#tableau = table(csv,selected)
#print(tableau)
#Simplex(tableau, selected)
Simplex(csv,selected)
#end
csv = read.csv("Complete nutritional values for the foods.csv", header=T)
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/final project/UI.R')
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R')
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R')
C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R
C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/Simplex.R
C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/QSI.R
C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/PR.R
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R')
library(shiny); runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R')
runApp('C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project/UI.R')
setwd("C:/Users/ACER/OneDrive - University of the Philippines/UPLB/BSCS/Second Year AY 23-24/CMSC 150/lab/JROng_CMSC150Project")
library(shiny); runApp('UI.R')
runApp('UI.R')
